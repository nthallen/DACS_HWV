%{
  /* qcli.tmc generated by gen_qcli.pl */
  #include "qclid.h"
  #include "sspdrv.h"
  const char * SSP_Status_Text(const unsigned char stat) {
    switch (stat) {
      case SSP_STATUS_GONE:    return "   Gone";
      case SSP_STATUS_CONNECT: return "Connect";
      case SSP_STATUS_READY:   return "  Ready";
      case SSP_STATUS_ARMED:   return "  Armed";
      case SSP_STATUS_TRIG:    return "Trigger";
      default:                 return "*******";
    }
  }
%}

TM typedef unsigned char SSP_Status_t { text "%7d" SSP_Status_Text(); }
TM typedef unsigned short XLONG { text "%5d"; }
TM typedef unsigned short QCLI_CS_t {
  text "%5d";
  collect x = sbrwa(x.address);
}

/* T_FPGA_t: MAX6628 output, resolution 1/16 degree
 *   reported as 128 bits per degree celcius */
TM typedef signed short T_FPGA_t { convert CELCIUS; text "%6.2lf"; }
Calibration ( T_FPGA_t, CELCIUS ) { 0, 0, 128, 1 }

/* T_HtSink_t: MAX6661 output. resolution 1/8 degree
  *  reported as 256 bits per degree */
TM typedef signed short T_HtSink_t { convert CELCIUS; text "%6.2lf"; }
Calibration ( T_HtSink_t, CELCIUS ) { 0, 0, 256, 1 }

TM "Receive" QCLI_0 1;

TM typedef unsigned short QCLI_0_Wave_t { text "%10d" QCLI_0_Wave_text(); }
TM 1 Hz QCLI_0_Wave_t QCLI_0_Wave;
TM 1 Hz UINT QCLI_0_s;
TM 1 Hz UINT QCLI_0_Stale;

Group QCLI_0_grp ( QCLI_0_Wave, QCLI_0_s ) {
  QCLI_0_Wave = QCLI_0.qcli_wave;
  QCLI_0_s = QCLI_0.status;
  QCLI_0_Stale = QCLI_0_obj->stale();
  QCLI_0_obj->synch();
}
TM 1 HZ QCLI_CS_t QCLI_0_CS; Address QCLI_0_CS 0x1000;
TM "Receive" SSP_0 1;

TM 1 Hz L20 SSP_0_Num;
TM 1 Hz L20 SSP_0_SN;
TM 1 Hz L20 SSP_0_TS;
TM 1 Hz XLONG SSP_0_Flags;
TM 1 Hz SSP_Status_t SSP_0_Status;
TM 1 Hz UINT SSP_0_Stale;
TM 1 Hz T_FPGA_t SSP_0_T_FPGA;
TM 1 Hz T_HtSink_t SSP_0_T_HtSink;

Group SSP_0_grp ( SSP_0_Num, SSP_0_SN, SSP_0_TS, SSP_0_Flags,
		 SSP_0_T_FPGA, SSP_0_T_HtSink ) {
  SSP_0_Num = SSP_0.index;
  SSP_0_SN = SSP_0.ScanNum;
  SSP_0_TS = SSP_0.Total_Skip;
  SSP_0_Flags = SSP_0.Flags;
  SSP_0_Status = SSP_0.Status;
  SSP_0_T_FPGA = SSP_0.T_FPGA & 0xFFF8;
  SSP_0_T_HtSink = SSP_0.T_HtSink & 0xFFE0;
  SSP_0_Stale = SSP_0_obj->stale();
  SSP_0_obj->synch();
}
